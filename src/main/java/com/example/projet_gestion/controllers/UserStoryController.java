package com.example.projet_gestion.controllers;


import com.example.projet_gestion.entity.Project;
import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ResourceBundle;

import static com.example.projet_gestion.controllers.AccueilController.project;
import static com.example.projet_gestion.controllers.LoginController.cnx;
import static com.example.projet_gestion.controllers.LoginController.loginUser;

public class UserStoryController implements Initializable {

    public Label iduserstory;
    public Label username;
    public Button projetBotton;
    public TextField epic;
    public TextField id;
    public TextField acteur;
    public TextField besoin;
    public TextField satisfaction;
    public TextField num;
    public Label alert;

    private Stage stage;
    private Scene scene;
    private Parent root;


    public void initialize(URL url, ResourceBundle resourceBundle) {

        String sql = "SELECT MAX(u.idUserStory)\n" +
                "FROM userstory u\n" +
                "JOIN projet p ON u.idProjet = p.idProjet\n" +
                "WHERE p.nom_projet = ?;";
        int maxId = 0;
        try {
            PreparedStatement ps = cnx.prepareStatement(sql);
            ps.setString(1, project.getNom_projet());
            ResultSet result = ps.executeQuery();
            if (result.next()) {
                maxId = result.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        username.setText(loginUser.getNom() + " " + loginUser.getPrenom());
        projetBotton.setText(project.getNom_projet());

        iduserstory.setText("US-" + maxId + ":");


    }

    public void insert() {

        String insertEpicSql = "INSERT INTO epic (titreepic, numero) VALUES (?, ?)";
        String insertUserStorySql = "INSERT INTO userstory (acteuruserstory,titre, numero, idEpic, idProjet, idBesoin) VALUES (?,?, ?, ?, ?, ?)";
        String insertBesoinSql = "INSERT INTO besoin (libelleBesoin) VALUES (?)";
        String insertSatisfactionSql = "INSERT INTO satisfaction (libelleSatisfaction, idUserStory) VALUES (?, ?)";

        try {
            // Get values from text fields
            String title = id.getText();
            String epicTitle = epic.getText();
            int epicNumber = Integer.parseInt(num.getText());
            String userStoryActor = acteur.getText();
            int userStoryNumber = Integer.parseInt(num.getText());
            String besoinLibelle = besoin.getText();
            String satisfactionLibelle = satisfaction.getText();
            int userStoryId = 0; // Will be generated by the database

            // Insert into Epic table
            PreparedStatement epicStatement = cnx.prepareStatement(insertEpicSql, Statement.RETURN_GENERATED_KEYS);
            epicStatement.setString(1, epicTitle);
            epicStatement.setInt(2, epicNumber);
            int epicRowsAffected = epicStatement.executeUpdate();

            // Get generated Epic ID
            int epicId = 0;
            ResultSet epicKeys = epicStatement.getGeneratedKeys();
            if (epicKeys.next()) {
                epicId = epicKeys.getInt(1);
            }


            // Insert into User Story table


            // Insert into Besoin table
            PreparedStatement besoinStatement = cnx.prepareStatement(insertBesoinSql, Statement.RETURN_GENERATED_KEYS);
            besoinStatement.setString(1, besoinLibelle);
            int besoinRowsAffected = besoinStatement.executeUpdate();
            int besoinId = 0;
            ResultSet besoinKeys = besoinStatement.getGeneratedKeys();
            if (besoinKeys.next()) {
                besoinId = besoinKeys.getInt(1);
            }


            System.out.println("besoin :"+besoinId+"  epic :"+epicId);

            PreparedStatement userStoryStatement = cnx.prepareStatement(insertUserStorySql, Statement.RETURN_GENERATED_KEYS);
            userStoryStatement.setString(1, userStoryActor);
            userStoryStatement.setString(2, title);
            userStoryStatement.setInt(3, userStoryNumber);
            userStoryStatement.setInt(4, epicId);
            userStoryStatement.setInt(5, Integer.parseInt(project.getIdprojet()));
            userStoryStatement.setInt(6, besoinId);
            int userStoryRowsAffected = userStoryStatement.executeUpdate();

            // Get generated User Story ID
            ResultSet userStoryKeys = userStoryStatement.getGeneratedKeys();
            if (userStoryKeys.next()) {
                userStoryId = userStoryKeys.getInt(1);
            }

            // Insert into Satisfaction table
            PreparedStatement satisfactionStatement = cnx.prepareStatement(insertSatisfactionSql);
            satisfactionStatement.setString(1, satisfactionLibelle);
            satisfactionStatement.setInt(2, userStoryId);

            int satisfactionRowsAffected = satisfactionStatement.executeUpdate();
            ResultSet satisfactionKeys = epicStatement.getGeneratedKeys();


            alert.setText("Data inserted successfully");

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

        public void back(ActionEvent event) throws IOException {
        root = FXMLLoader.load(getClass().getResource("/com/example/projet_gestion/userstory storymap .fxml"));
        stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
        scene = new Scene(root);
        stage.setTitle("E006 - Plage de US et de la Story map");
        stage.setScene(scene);
        stage.show();



    }








}
